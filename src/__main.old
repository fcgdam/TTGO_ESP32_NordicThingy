/**
 * A BLE client example that is rich in capabilities.
 */

#include <Arduino.h>
#include <SSD1306.h>
#include "BLEDevice.h"

#define LEDPIN 2

#define OLED_I2C_ADDR 0x3C
#define OLED_RESET 16
#define OLED_SDA 4
#define OLED_SCL 15

SSD1306 display (OLED_I2C_ADDR, OLED_SDA, OLED_SCL);
//#include "BLEScan.h"

// The Nordic Thingy:52 service UUID
//static BLEUUID serviceUUID("ef680100-9b35-4933-9b10-52ffa9740042");
static BLEUUID serviceUUID(    "0000180F-0000-1000-8000-00805f9b34fb");
static BLEUUID environmentUUID("ef680200-9b35-4933-9b10-52ffa9740042");
// The characteristic of the remote service we are interested in.
static BLEUUID temperatureUUID("ef680201-9b35-4933-9b10-52ffa9740042");
static BLEUUID CCCD("00002902-0000-1000-8000-00805f9b34fb");

static BLEAddress *pServerAddress;
static boolean doConnect = false;
static boolean connected = false;
static BLERemoteCharacteristic* pRemoteCharacteristic;

static void notifyCallback(
  BLERemoteCharacteristic* pBLERemoteCharacteristic,
  uint8_t* pData,
  size_t length,
  bool isNotify) {
    Serial.print("Notify callback for characteristic ");
    Serial.print(pBLERemoteCharacteristic->getUUID().toString().c_str());
    Serial.print(" of data length ");
    Serial.println(length);
}

void getTemp(BLERemoteCharacteristic *p) {
  std::string rxValue = p->readValue();

  Serial.println("Ler o valor....");
  if (rxValue.length() > 0) {
    Serial.println("*********");
    Serial.print("Received Value: ");
    for (int i = 0; i < rxValue.length(); i++) {
      Serial.print(rxValue[i]);
    }

    Serial.println();
    Serial.println("*********");
  }
}

bool connectToServer(BLEAddress pAddress) {
    uint8_t enableNotify = 0x01;

    Serial.print("Forming a connection to ");
    Serial.println(pAddress.toString().c_str());

    BLEClient*  pClient  = BLEDevice::createClient();
    Serial.println(" - Created client");

    // Connect to the remove BLE Server.
    pClient->connect(pAddress);
    Serial.println(" - Connected to server");

    // Obtain a reference to the service we are after in the remote BLE server.
//    BLERemoteService* pRemoteService = pClient->getService(serviceUUID);
    BLERemoteService* pRemoteService = pClient->getService(environmentUUID);
    if (pRemoteService == nullptr) {
      Serial.print("Failed to find our service UUID: ");
      Serial.println(serviceUUID.toString().c_str());
      return false;
    }
    Serial.println(" - Found our service");


    // Obtain a reference to the characteristic in the service of the remote BLE server.
    pRemoteCharacteristic = pRemoteService->getCharacteristic(temperatureUUID);
    if (pRemoteCharacteristic == nullptr) {
      Serial.print("Failed to find our characteristic UUID: ");
      Serial.println(temperatureUUID.toString().c_str());
      return false;
    }
    Serial.println(" - Found our characteristic");

    // Read the value of the characteristic.
    uint16_t value = pRemoteCharacteristic->readUInt16();
    Serial.print("The characteristic value was: ");
    Serial.println(value);

  //  getTemp(pRemoteCharacteristic);
  //pRemoteCharacteristic->writeValue(0x01, false);
  //BLEDescriptor* pDescriptor =   pRemoteCharacteristic->getDescriptor(CCCD);
  //pDescriptor->setValue((uint8_t *)&enableNotify, 1); // enable notify
/*
  if (pRemoteCharacteristic->canNotify() ) {
      Serial.println("_----------------------------------------------- CAN NOTIFY!!!!");
    }
*/
    //pRemoteCharacteristic->enableNotification( false );
    pRemoteCharacteristic->registerForNotify( notifyCallback );


    return true;
}
/**
 * Scan for BLE servers and find the first one that advertises the service we are looking for.
 */
class MyAdvertisedDeviceCallbacks: public BLEAdvertisedDeviceCallbacks {
 /**
   * Called for each advertising BLE server.
   */
  void onResult(BLEAdvertisedDevice advertisedDevice) {
    Serial.print("BLE Advertised Device found: ");
    Serial.println(advertisedDevice.toString().c_str());

    // We have found a device, let us now see if it contains the service we are looking for.
    if (advertisedDevice.haveServiceUUID() && advertisedDevice.getServiceUUID().equals(serviceUUID)) {

      //
      Serial.print("Found our device!  address: ");
      advertisedDevice.getScan()->stop();

      pServerAddress = new BLEAddress(advertisedDevice.getAddress());
      doConnect = true;

    } // Found our server
  } // onResult
}; // MyAdvertisedDeviceCallbacks


void setup() {
  Serial.begin(115200);

  delay(1500);
  // reset the OLED
  pinMode(OLED_RESET,OUTPUT);
  digitalWrite(OLED_RESET, LOW);
  delay(50);
  digitalWrite(OLED_RESET, HIGH);

  display.init ();
  display.flipScreenVertically ();
  display.setFont (ArialMT_Plain_10);

  display.setTextAlignment (TEXT_ALIGN_LEFT);

  display.drawString (0, 0, "BLE SCAN...!");
  display.display ();



  Serial.println("Starting Arduino BLE Client application...");
  BLEDevice::init("");

  // Retrieve a Scanner and set the callback we want to use to be informed when we
  // have detected a new device.  Specify that we want active scanning and start the
  // scan to run for 30 seconds.
  BLEScan* pBLEScan = BLEDevice::getScan();
  pBLEScan->setAdvertisedDeviceCallbacks(new MyAdvertisedDeviceCallbacks());
  pBLEScan->setActiveScan(false);
  pBLEScan->start(30);
} // End of setup.


// This is the Arduino main loop function.
void loop() {

  // If the flag "doConnect" is true then we have scanned for and found the desired
  // BLE Server with which we wish to connect.  Now we connect to it.  Once we are
  // connected we set the connected flag to be true.
  if (doConnect == true) {
    display.clear();
    if (connectToServer(*pServerAddress)) {
      Serial.println("We are now connected to the BLE Server.");
      connected = true;

      display.drawString (0, 0, "Connected to BLE Server!");

    } else {
      Serial.println("We have failed to connect to the server there is nothing more we will do.");
      display.drawString (0, 0, "FAILED to connect to BLE Server!");
    }
    doConnect = false;
    display.display();
  }

  // If we are connected to a peer BLE Server, update the characteristic each time we are reached
  // with the current time since boot.
  if (connected) {
    //String newValue = "Time since boot: " + String(millis()/1000);
    //Serial.println("Setting new characteristic value to \"" + newValue + "\"");

    // Set the characteristic's value to be the array of bytes that is actually a string.
    //pRemoteCharacteristic->writeValue(newValue.c_str(), newValue.length());
    // Read the value of the characteristic.
    //uint8_t value = pRemoteCharacteristic->readUInt8();
    //Serial.print("The characteristic value was: ");
    //Serial.println(value);
  }

  delay(1000); // Delay a second between loops.
} // End of loop
